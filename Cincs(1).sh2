####################################################################################################################################
####################################################################################################################################
########       			CINCS (CINCS Is Not a Configuration Script)                                               ##########
########			A utility to configure SELinux for supported services                                     ##########
########			by Jeffrey Kendrick	3/22/2014							  ##########
####################################################################################################################################
#!/bin/bash

#heading#################################   Variable Declarations   ################################################################

policycoreutils_Installed=Maybe
Samba_Installed=Maybe
NFS_Installed=Maybe
vsftpd_Installed=Maybe
CincsDir="/tmp/cincs/"
SambaConf="/etc/samba/smb.conf"
SambaConfStatus=Maybe
DesiredState=Maybe
PersistanceFlag=Maybe
Uname=""

#heading#################################   Functions     ###########################################################################


# function to create and refresh a file with boolean infomation which can be read more quickly than the results of the semanage command

function BoolStatus()
{
	mkdir -p $CincsDir
	rm -f $CincsDir/boolstatus.txt # Not sure why (no clobber is not set in .bashrc) but > results in an empty file
	#have to rm the file and recreate it
	echo "Generating a list of booleans and their statuses. This may take a while."
	semanage boolean -l | cat -n >> $CincsDir/boolstatus.txt
}


# function to display title, help message, SELinux mode and policy type

function DisplayHeader()
{
SEstatus=`echo $(sestatus | grep status | cut -d: -f2)`
SEmode=`getenforce`
SEPolicyType=`echo $(sestatus | grep "Policy from config file:" | cut -d: -f2)`

echo "			CINCS" 
echo "This program will help configure SELinux for selected services."
echo ""
echo "SELinux status is:" $SEstatus "  SELinux mode is:" $SEmode "  Policy Type is:" $SEPolicyType
}

# function to map unix logins to selinux users and check context ( assuming time permits)

function DisplayUsers ()
{
clear
# find the lines with underscores in them   add a header format the output of awk to columns of 20 spaces and tee the output to the screen and 
semanage login -l | grep _  | awk 'BEGIN {print "Login id             SELinux User\n"}; {printf("%- 20s %- 20s\n",  $1, $2);}' | tee $CincsDir/users.txt
echo ""
echo ""
}


# function to check the context of the default, root, and system users

function CheckUsers ()
{
 DefaultUser=`awk '{if ($2 ~ "default" && $9 ~ "unconfined_u") print  "YES"}' $CincsDir/users.txt`
 RootUser=`awk '{if ($2 ~ "root" && $9 ~ "unconfined_u") print "YES"}' $CincsDir/users.txt`
 SystemUser=`awk '{if ($2 ~ "system_u" && $9 ~ "system_u") print "YES"}' $CincsDir/users.txt`
}

function CheckServices ()
{

function GetSambaShares ()
{
if [ -e $CincsDir/sambashares.txt ]; then 
rm -f $CincsDir/sambashares.txt
fi
#Get all of the share labels and the paths to the shares in them and output those to a text file
readarray -t dirs < <( awk '               /^\[/ { gsub(/[][]/,""); gr=$0; }
/^[ \t]*path[ \t]*=/ { gsub(/^[ \t]*path[ \t]*=[ \t]*/, "" );
                print gr"|"$0; }' /etc/samba/smb.conf ) 
for x in "${dirs[@]}"; do printf -- "%s %s \n" "${x%%|*}" "${x#*|}"; done >> $CincsDir/sambashares.txt
#				# Now read the share names into a variable one at a time and check thier contexts
#				echo "The Following shares were found. As a general rule samba shares should be of the "
#				echo "type samba_share_t. "
#				while read Record
#				do
#					fpath=`echo $Record | cut -d: -f2`
#					contx=$(stat $fpath --printf=%C)
#				done < $CincsDir/sambashares.txt

}


echo "******** Status of Packages and Configuration Files  *************************************************************************"
rpm -q policycoreutils

if [[ $? = 0 ]]
then
   	policycoreutils_installed=Yes
	echo 	"  is installed"
else
   	policycoreutils_installed=No
	read -p "Policycoreutils_installed is required for this script. Policycoreutils is not installed. Would you like to install it now? Y/N: " Ans
		if [[ $Ans = Y ]] 
			then 
				echo "Installing policycoreutils"
				yum install -y policycoreutils
			else
				echo "Have it your way. policycoreutils will not be installed."
				echo "However, this script cannot continue. Fare the well."
				exit 1
		fi				
fi

rpm -q samba

if [[ $? = 0 ]]
	then
    		Samba_Installed=Yes
			if [ -e "$SambaConf" ]; then
				SambaConfStatus=Yes
				echo 	" is installed	and its configuration file	`echo $SambaConf` exists  "
			else
				echo " WARNING!! is installed but 		`echo $SambaConf is not present` "
			fi
	else
	    	Samba_Installed=No
		read -p " Samba is not installed. Would you like to install it now? Y/N: " Ans
			if [[ $Ans = Y ]] 
				then 
					echo "Installing Samba"
					yum install -y samba samba-client
				else
					echo "Have it your way. Samba will not be installed."
			fi				
fi

rpm -q vsftpd
if  [[  $? = 0 ]]
        then
            	vsftpd_Installed=Yes
                echo    " is installed"
        else
            	vsftpd_Installed=No
                read -p " vsftpd is not installed. Would you like to install it now? Y/N: " Ans
                        if [[ $Ans = Y ]]
                                then
                                    	echo "Installing vsftpd"  
                                        yum install -y vsftpd
                                else
                                    	echo "Have it your way. vsftpd will not be installed"
                        fi
fi
	
# Change to NFS
rpm -q vsftpd
if  [[  $? = 0 ]]
        then
            	vsftpd_Installed=Yes
                echo    " is installed"
        else
            	vsftpd_Installed=No
                read -p " vsftpd is not installed. Would you like to install it now? Y/N: " Ans
                        if [[ $Ans = Y ]]
                                then
                                    	echo "Installing vsftpd"  
                                        yum install -y vsftpd
                                else
                                    	echo "Have it your way. vsftpd will not be installed"
                        fi
fi
echo "************************************* MAIN MENU*********************************** ******************************************"
}


#heading###########################    Main Section     ###########################################################################

# Check for root
if [ "$(id -u)" != "0" ]; then
echo "You must be root to run this script. Try SU -  and remember, with great power comes great responsibility." 1>&2
exit 1
fi

clear
DisplayHeader
echo " "
CheckServices
echo ""
echo "Generating a list of services"


#Menu Loop Start

while :

	do


		echo "1  Boolean menu"
		echo "2  User menu"
		echo "3  Configure SELInux for vsFTP"
		echo "4  Configure SELinux for NFS"
		echo "5  Configure SELInux for Samba"
		echo "6  Force relabel upon reboot"
		echo "7  Exit"		
		echo ""
		echo ""
		read -p "Choose an option from the list (type the number)" OuterChoice
		

		case $OuterChoice in
			
			1)	BoolStatus
				while :
					do	
						
						echo ""						
						echo "1 Build or refresh boolean list"
						echo ""
						echo "2 Show a list of all booleans"
						echo "*****Space bar to advance one page or Q to quit*****"
						echo ""
						echo "3 Search the list of booleans for a text string"
						echo ""
						echo "4 Toggle a boolean"
						echo ""
						echo "5 Go back one level"
						echo ""
						read -p "Choose an option from the list   " InnerChoice1

						case $InnerChoice1 in 


							1)
								BoolStatus
								;;
							2)
								awk '{print $1 "\t" $2}' $CincsDir/boolstatus.txt | less
								clear
								;;
							3)
								clear
								read -p "Enter search string:  " SearchStr
								grep $SearchStr $CincsDir/boolstatus.txt
								echo ""
								;;
							4)	read -p "Enter bool to toggle: " boolnum
								
								boolToToggle=`awk -v bool_awk=$boolnum '{if ($1 == bool_awk) print $2}' $CincsDir/boolstatus.txt`
								boolTargetState=`awk -v bool_awk=$boolnum '{if ($1 == bool_awk) print $3}' $CincsDir/boolstatus.txt | tr -d [:punct:]`
								boolTargetPstate=`awk -v bool_awk=$boolnum '{if ($1 == bool_awk) print $5}' $CincsDir/boolstatus.txt | tr -d [:punct:]`
								echo "You have chosen to toggle " $boolToToggle ".  It's current state is " $boolTargetState ".  It's persistant or default state is " $boolTargetPstate ". "
								echo ""
								DesiredState=Maybe
								PersistanceFlag=Maybe

								while [[ $DesiredState != "on" ]] && [[ $DesiredState != "off" ]]
								do 
									read -p "Type off or on for the desired state of "$boolToToggle": " DesiredState
								done
								while [[ $PersistanceFlag != "Y" ]] && [[ $PersistanceFlag != "N" ]]
								do
									echo "Would you like to make the default state match the new state for this boolean?"
									read -p "Type Y or N to choose whether the change will persist following a reboot:   " PersistanceFlag
								done
									
								if [[ $PersistanceFlag == "Y" ]]
								then
									echo "We will now set a boolean and write its default state to the SELinux database. Go get a cup of coffee and maybe a magazine or two."
									setsebool -P $boolToToggle $DesiredState 
									if [[ $? -ne 1 ]]
									then
										clear
										echo "The selected boolean "$boolToToggle " has been changed to "$DesiredState " and the change  will persist between reboots. "
									else
										clear
										echo "There was a problem changing the state of this boolean."
									fi
								elif [[ $PersistanceFlag == "N" ]]
								then
									setsebool $boolToToggle $DesiredState
									if [[ $? -ne 1 ]]
									then
										clear
										echo "The selected boolean "$boolToToggle " has been changed to "$DesiredState " and the change  will not persist between reboots. "
									
									else
										echo "Invalid Input"
									fi
													
								fi
								;;
							
							5)	
								clear
								break
								;;
							esac
					done
					;;	

			
			2) 	clear
				echo "SELinux in targeted mode is more concerned with object context and less so with user contexts.."
				echo "However, three users are very important: system, root, and default."
				echo "The first two submenus will help you check the context of these users."
				echo "The next two submenus will help you create users whose abilities are restricted by SELinux."
				echo ""
				
				while :

		
					do  
						echo "1 Display context for login users"
						echo "2 Check context for login users"
						echo "3 Add a confined user"
						echo "4.Add a guest user"
						echo "5 Up one level"
						echo ""
						read -p "Choose an option from the list   " InnerChoice2
						
						case $InnerChoice2 in
						
							1)
								DisplayUsers
								;;
							2)
								CheckUsers
								echo "Default user (most regular users) correct?" $DefaultUser
								echo "Root User context correct?" $RootUser
								echo "System User context correct?" $SystemUser
								echo ""
								echo ""
								echo "Correct, here, means they map to the what they should default to. If you or another admin"
								echo "did not change them on a red hat based system you have a problem. Any files created by these users will"
								echo "have the wrong selinux context and the user may not have permissions required to perform his or her role or permissions"
								echo "beyond those needed."
								;;
							3) echo "Add a confined user"
							   echo "This option adds a confined user (mapped to user_u)."
							   echo "This means this user will not be able to use su or sudo."
							echo "You can accomplish the same thing from the command line by adding -Z guest_u to a"
							echo "useradd command."
							echo ""
							read -p "Enter the desired username:  " Uname
							/usr/sbin/useradd -Z user_u $Uname
							echo ""
							if [[ $? -eq 0 ]]
							then
								/usr/bin/passwd $Uname
							else
								echo "Error adding confined user " $Uname
							fi
								;;
							4) echo "Add a guest user"
							   echo "This option adds a guest user (mapped to guest_u)."
							   echo "This means this user will not be able to use su or sudo."
							   echo "Nor will this user be able to use the X Windows system or execute programs"
							   echo "in his home directory nor /tmp as regular users are able to do."
							echo "You can accomplish the same thing from the command line by adding -Z guest_u to a"
							echo "useradd command."
							echo ""
							read -p "Enter the desired username:  " Uname
							/usr/sbin/useradd -Z guest_u $Uname
							echo ""
							if [[ $? -eq 0 ]]
							then
								/usr/bin/passwd $Uname
							else
								echo "Error adding guest user " $Uname
							fi
								;;
							5)
								clear
								break
								;;
						esac
						done
						DisplayUsers
				
				;;

			3) echo "Configure NFS"
				;;
			4) echo "Configure vsFTP"
				;;
			5) 	clear
				echo "This Submenu configures Samba for SELinux"
				echo ""
				while :
					do
						echo "1 Get a list of samba shares and their contexts"
						echo "2 Change context of a share"
						echo "3 Boolean configuration"
						echo "4 Exit"
						echo ""
						read -p "Choose an option from the list   " InnerChoice5
						
						case $InnerChoice5 in
							1)	clear			
								GetSambaShares
								# Now read the share names into a variable one at a time and check thier contexts
								echo "The Following shares were found. As a general rule samba shares should be of the "
								echo "type samba_share_t. Only relabel files and directories you create. "
								echo "DO NOT RELABEL SYSTEM FILES. If more than one file sharing protocol is used for" 
								echo "the same directory the context must be set to public_content_t or public_content_rw_t."
								echo ""
								while read Record
								do
									smbLabel=`echo $Record | cut -d: -f1`					
									fpath=`echo $Record | cut -d: -f2`
									contx=$(stat $fpath --printf=%C)
								
									echo "The directory listed in [" $smbLabel "]	" `echo $fpath` "has the context:  " $contx
								done < $CincsDir/sambashares.txt

								echo ""
								echo "This Submenu configures Samba for SELinux"
								echo ""
								;;
				
							2) 
								clear
								#echo "Label    "   "Share         \t" "  SELinux context" | column -ts
								echo ""
								i=1
								while read Record
								do
									
									smbLabel=`echo $Record | cut -d: -f1`					
									fpath=`echo $Record | cut -d: -f2`
									contx=$(stat $fpath --printf=%C)
								
									 printf '%-5s %-20s %-25s %-20s\n' $i $smbLabel  `echo $fpath`  $contx 
									i=$[i + 1]
								done < $CincsDir/sambashares.txt
								echo ""
								;;
				
							3) echo "Still more to do here"
								;;
				
							4) clear
								break
								;;
								
						esac
					done
				
				# Get rid of any old sambashares lists
#				if [ -e $CincsDir/sambashares.txt ]; then 
#				rm -f $CincsDir/sambashares.txt
#				fi
#				#Get all of the share labels and the paths to the shares in them and output those to a text file
#				readarray -t dirs < <( awk '               /^\[/ { gsub(/[][]/,""); gr=$0; }
#                        	/^[ \t]*path[ \t]*=/ { gsub(/^[ \t]*path[ \t]*=[ \t]*/, "" );
#                                               print gr"|"$0; }' /etc/samba/smb.conf ) 
#				for x in "${dirs[@]}"; do printf -- "%s: %s \n" "${x%%|*}" "${x#*|}"; done >> $CincsDir/sambashares.txt
#				

				#Now that the above more or less works we need to offer to change it
				
				;;
			6) echo "Code to force relabel"
				;;

			7) 	clear
				echo "Exiting CINCS"
				break 
				;;
		esac
	done
# use either service servicename status, chkconfig, or rpm to see if a service is installed 
# this snippet can check for a specific run level what services are running # chkconfig | awk ''$5 ~ /on/ {print $1}''
# I want a command or loop that can output just the run levels my specified services are running at
# Desired output: Service Foo is enabled and on for run levels 3,4,5 

#This might be useful for showing a list of runlevels but needs more work ## pretty happy to have it this far along though
#
## chkconfig | awk 
#{for(i=0; i<=NF; ++i){ if ($i ~ /on/)  print $i}}






#check the existance of the conf file for that service and set a variable based on that

# Generate a list for the main menu of services installed and with config files and use a while loop to choose between the following

# option 1 view all booleans on the system
# option 2 view booleans for supported services
#	Apache
#		allow_httpd_anon_write
#		allow_httpd_mod_auth_ntlm_winbind
#		allow_httpd_mod_auth_pam
#		allow_httpd_sys_script_anon_write
#		httpd_builtin_scripting
#		httpd_can_check_spam
#		httpd_can_network_connect
#		httpd_can_network_connect_cobbler
#		httpd_can_network_connect_db

#
#	FTP
#	apply to FTP (default is vsFTP) not to sftp
#allow_ftpd_anon_write	#prompt if they want to allow uploads from anonymous users

#allow_ftpd_full_access	#prompt if user wants to allow full access to all directories shared beyond those with public_content_rw_t context and home directories if enabled

#allow_ftpd_use_cifs	#check if there are any mounted samba shares and prompt if the user wants to allow ftp access to them

#allow_ftpd_use_nfs	#check if there are any nfs mounts an prompt user if they want to allow ftp access to them

#ftpd_connect_db	#Prompt if user wants ftp server to be able to initiate connections to a database server. Often used for storing authentication info.

#ftp_home_dir	#Do you want users to be able to access their home directories through ftp?


#
#	NFS
#
#cdrecord_read_content # prompt if the user wants to allow cdrecord to access 

# option 2A choose a service from the list
# option 2B choose a boolean
	# option  view it or change it or more info or up a level
# option 3 view changes recommended based on parsing the config files for those services

# option 4 view the file contexts of a selected service and reccomended changes

#option 5 quit





